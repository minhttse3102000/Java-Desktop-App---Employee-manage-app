/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DAO.EmpDAO;
import DTO.EmpDTO;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author minhv
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
    ArrayList<EmpDTO> empList;
    boolean find=false;
    public MainFrame() {
        initComponents();
        this.setLocation(450, 180);
        this.setResizable(false);
        this.setTitle("Emp Management");
        
    }
    boolean isDateValid() {
        try {
            formatter.setLenient(false);
            formatter.parse(dobTextField.getText());
            return true;
        } catch (ParseException e) {
            
            return false;
        }
    }
    
    void loadEmpTable() {
        Vector data = new Vector();
        Vector header = new Vector();
        header.add("EmpID");
        header.add("FullName");
        header.add("Phone");
        header.add("Email");
        empList = new ArrayList<>();
        empList = EmpDAO.getEmpData();
        for (EmpDTO emp : empList) {
            Vector row = new Vector();
            row.add(emp.getEmpID());
            row.add(emp.getFullname());
            row.add(emp.getPhone());
            row.add(emp.getEmail());
            data.add(row);
        }

       
        DefaultTableModel model = (DefaultTableModel) empTable.getModel();
        model.setDataVector(data, header);

        empTable.setRowSelectionInterval(0, 0);
        empTableMouseClicked(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        empTable = new javax.swing.JTable();
        getAllButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        empIDTextField = new javax.swing.JTextField();
        fullNameTextField = new javax.swing.JTextField();
        phoneTextField = new javax.swing.JTextField();
        emailTextField = new javax.swing.JTextField();
        dobTextField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        addressTextArea = new javax.swing.JTextArea();
        findButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        createButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 34)); // NOI18N
        jLabel1.setText("Emp Management");

        empTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "EmpID", "FullName", "Phone", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        empTable.getTableHeader().setReorderingAllowed(false);
        empTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                empTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(empTable);

        getAllButton.setText("Get All Emp");
        getAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAllButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Emp's Detail:");

        jLabel3.setText("EmpID:");

        jLabel4.setText("FullName:");

        jLabel5.setText("Phone:");

        jLabel6.setText("Email:");

        jLabel7.setText("Address:");

        jLabel8.setText("DOB:");

        empIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empIDTextFieldActionPerformed(evt);
            }
        });

        addressTextArea.setColumns(20);
        addressTextArea.setRows(5);
        jScrollPane2.setViewportView(addressTextArea);

        findButton.setText("Find by EmpID");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add new");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        createButton.setText("Create Emp");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update Emp");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove Emp");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(addButton))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(createButton)
                        .addGap(23, 23, 23)
                        .addComponent(updateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addComponent(removeButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(empIDTextField)
                            .addComponent(fullNameTextField)
                            .addComponent(phoneTextField)
                            .addComponent(emailTextField)
                            .addComponent(dobTextField)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE))
                        .addGap(40, 40, 40)
                        .addComponent(findButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(empIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findButton))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(fullNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(phoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(101, 101, 101)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(dobTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(createButton)
                    .addComponent(updateButton)
                    .addComponent(removeButton))
                .addGap(43, 43, 43))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(getAllButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(389, 389, 389))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(getAllButton))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void empIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_empIDTextFieldActionPerformed

    private void getAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAllButtonActionPerformed
        // TODO add your handling code here:
        loadEmpTable();
    }//GEN-LAST:event_getAllButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        if(empList!=null){
            empIDTextField.setText("");
            fullNameTextField.setText("");
            phoneTextField.setText("");
            emailTextField.setText("");
            addressTextArea.setText("");
            dobTextField.setText("");
            
            empIDTextField.setEnabled(true);
            empIDTextField.requestFocus(true);
            findButton.setText("Find By EmpID");
            find=false;
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void empTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_empTableMouseClicked
        // TODO add your handling code here:
        if (empList != null) {
            int index = empTable.getSelectedRow();
            if (index >= 0) {
                empIDTextField.setText(empList.get(index).getEmpID());
                fullNameTextField.setText(empList.get(index).getFullname());
                phoneTextField.setText(empList.get(index).getPhone());
                emailTextField.setText(empList.get(index).getEmail());
                addressTextArea.setText(empList.get(index).getAddress());
                dobTextField.setText(formatter.format(empList.get(index).getDateOfBirth()));
                
                empIDTextField.setEnabled(false);
                fullNameTextField.setEnabled(true);
                phoneTextField.setEnabled(true);
                emailTextField.setEnabled(true);
                addressTextArea.setEnabled(true);
                dobTextField.setEnabled(true);
                findButton.setText("Find By EmpID");
                find=false;
            }

        }
    }//GEN-LAST:event_empTableMouseClicked

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        // TODO add your handling code here:
        if(empList!=null){
            boolean checkID=true;
            for (EmpDTO empDTO : empList) {
                if (empIDTextField.getText().toUpperCase().equals(empDTO.getEmpID())) {
                    checkID = false;
                }
            }
            if (empIDTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "EmpID is not empty!");
                empIDTextField.requestFocus(true);
            } else if (empIDTextField.getText().length() > 10 ) {
                JOptionPane.showMessageDialog(null, "EmpID length is so long ! (must <10)");
                empIDTextField.requestFocus(true);
            } else if ( !empIDTextField.getText().matches("[^@$#]*")) {
                JOptionPane.showMessageDialog(null, "EmpID format is not valid!(Not @,S,# )");
                empIDTextField.requestFocus(true);
            } else if (checkID == false) {
                JOptionPane.showMessageDialog(null, "EmpID is duplicated!");
                empIDTextField.requestFocus(true);
            }else if (fullNameTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "FullName is not empty!");
                fullNameTextField.requestFocus(true);
            } else if (fullNameTextField.getText().length() > 30) {
                JOptionPane.showMessageDialog(null, "FullName length is so long! (must <30)");
                fullNameTextField.requestFocus(true);
            }
            else if (phoneTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Phone is not empty!");
                phoneTextField.requestFocus(true);
            }
            else if (!phoneTextField.getText().matches("[0-9]*")) {
                JOptionPane.showMessageDialog(null, "Phone contain numeric characters only (0 – 9) ");
                phoneTextField.requestFocus(true);
            }
            else if (phoneTextField.getText().length() > 15 || phoneTextField.getText().length() <10) {
                JOptionPane.showMessageDialog(null, "Phone length is invalid! (10< phone <15)");
                phoneTextField.requestFocus(true);
            }else if (emailTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Email is not empty!");
                emailTextField.requestFocus(true);
            }else if (!emailTextField.getText().matches("[^!$#@.]*@[^!$#@.]*[.][^!$#@.]*[.][^!$#@.]*")) {
                JOptionPane.showMessageDialog(null, "Email contain only one “@” character, do not contain special characters (!, #, $) !");
                emailTextField.requestFocus(true);
            }else if (emailTextField.getText().length() >30) {
                JOptionPane.showMessageDialog(null, "Email length is so long! (must <30)");
                emailTextField.requestFocus(true);
            }else if (addressTextArea.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Address is not empty!");
                addressTextArea.requestFocus(true);
            }else if (addressTextArea.getText().length() >300) {
                JOptionPane.showMessageDialog(null, "Address length is so long! (must <300)");
                addressTextArea.requestFocus(true);
            }else if (dobTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "DOB is not empty!");
                dobTextField.requestFocus(true);
            }else if (isDateValid()==false) {
                JOptionPane.showMessageDialog(null, "Wrong format date MM/dd/yyyy");
                dobTextField.requestFocus(true);
            }else{
                try {
                    EmpDAO.insertEmp(empIDTextField.getText(), fullNameTextField.getText(), phoneTextField.getText(), 
                            emailTextField.getText(), addressTextArea.getText(), dobTextField.getText(), false);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error when add data");
                }
                loadEmpTable();
            }
        }


    }//GEN-LAST:event_createButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        // TODO add your handling code here:
        if (empList != null) {
            int index = empTable.getSelectedRow();
            if (index >= 0) {
                if (fullNameTextField.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "FullName is not empty!");
                    fullNameTextField.requestFocus(true);
                } else if (fullNameTextField.getText().length() > 30) {
                    JOptionPane.showMessageDialog(null, "FullName length is so long! (must <30)");
                    fullNameTextField.requestFocus(true);
                } else if (phoneTextField.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Phone is not empty!");
                    phoneTextField.requestFocus(true);
                } else if (!phoneTextField.getText().matches("[0-9]*")) {
                    JOptionPane.showMessageDialog(null, "Phone contain numeric characters only (0 – 9) ");
                    phoneTextField.requestFocus(true);
                } else if (phoneTextField.getText().length() > 15 || phoneTextField.getText().length() < 10) {
                    JOptionPane.showMessageDialog(null, "Phone length is invalid! (10< phone <15)");
                    phoneTextField.requestFocus(true);
                } else if (emailTextField.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Email is not empty!");
                    emailTextField.requestFocus(true);
                } else if (!emailTextField.getText().matches("[^!$#@.]*@[^!$#@.]*[.][^!$#@.]*[.][^!$#@.]*")) {
                    JOptionPane.showMessageDialog(null, "Email contain only one “@” character, do not contain special characters (!, #, $) !");
                    emailTextField.requestFocus(true);
                } else if (emailTextField.getText().length() > 30) {
                    JOptionPane.showMessageDialog(null, "Email length is so long! (must <30)");
                    emailTextField.requestFocus(true);
                } else if (addressTextArea.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Address is not empty!");
                    addressTextArea.requestFocus(true);
                } else if (addressTextArea.getText().length() > 300) {
                    JOptionPane.showMessageDialog(null, "Address length is so long! (must <300)");
                    addressTextArea.requestFocus(true);
                } else if (dobTextField.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "DOB is not empty!");
                    dobTextField.requestFocus(true);
                } else if (isDateValid() == false) {
                    JOptionPane.showMessageDialog(null, "Wrong format date MM/dd/yyyy");
                    dobTextField.requestFocus(true);
                } else {
                    try {
                        EmpDAO.updateEmp(empIDTextField.getText(), fullNameTextField.getText(), phoneTextField.getText(),
                                emailTextField.getText(), addressTextArea.getText(), dobTextField.getText());
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error when add data");
                    }
                    loadEmpTable();
                }
            }
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
        if (empList != null) {
            int index = empTable.getSelectedRow();
            if (index >= 0) {
                int choice = JOptionPane.showConfirmDialog(null, "Do you want to delete this row ?", "Delete", JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.YES_OPTION) {
                    try {
                        EmpDAO.deleteEmp(empIDTextField.getText());
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    loadEmpTable();
                }
            }
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        // TODO add your handling code here:
        if (empList != null) {
            if (find == false) {
                empIDTextField.setText("");
                fullNameTextField.setText("");
                phoneTextField.setText("");
                emailTextField.setText("");
                addressTextArea.setText("");
                dobTextField.setText("");

                empIDTextField.setEnabled(true);
                empIDTextField.requestFocus(true);
                fullNameTextField.setEnabled(false);
                phoneTextField.setEnabled(false);
                emailTextField.setEnabled(false);
                addressTextArea.setEnabled(false);
                dobTextField.setEnabled(false);
                findButton.setText("Find");
                find = true;
            }else{
                if (empIDTextField.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "EmpID is not empty!");
                    empIDTextField.requestFocus(true);
                } else {
                    int indexFind=-1;
                    for (EmpDTO empDTO : empList) {
                        if(empIDTextField.getText().equals(empDTO.getEmpID())){
                            indexFind=empList.indexOf(empDTO);
                        }
                    }
                    if(indexFind>=0){
                        empTable.setRowSelectionInterval(indexFind, indexFind);
                        empTableMouseClicked(null);
                    }else{
                        JOptionPane.showMessageDialog(null, "Not found employee!");
                        empIDTextField.requestFocus(true);
                    }                 
                }
            }
            
        }
    }//GEN-LAST:event_findButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextArea addressTextArea;
    private javax.swing.JButton createButton;
    private javax.swing.JTextField dobTextField;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JTextField empIDTextField;
    private javax.swing.JTable empTable;
    private javax.swing.JButton findButton;
    private javax.swing.JTextField fullNameTextField;
    private javax.swing.JButton getAllButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField phoneTextField;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
